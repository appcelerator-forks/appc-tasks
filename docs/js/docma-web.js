/*! dustjs-linkedin - v2.7.2
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.2"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},Context.wrap=function(a,b){return a instanceof Context?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.3
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?module.exports=b(require("dustjs-linkedin")):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n||e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=p(this.path,this.keys=[],t)}function c(e){if(1===u(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&f(t.href)){var o=t.pathname+t.search+(t.hash||"");void 0!==n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function u(e){return e=e||window.event,null===e.which?e.button:e.which}function f(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var p=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){if(0===arguments.length)return g;g=e},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,c,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,c,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&void 0===t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];if(!e)return n();e(o,t)}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){if(t.match(n.path,n.params))return e(n,r);r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,c=a.length;s<c;++s){var u=n[s-1],f=o(a[s]);void 0===f&&hasOwnProperty.call(t,u.name)||(t[u.name]=f)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=f}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div");return new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})}).observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){r.shift()()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],c=t[1],u=t.index;if(o+=e.slice(i,u),i=u+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var f=t[2],p=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=f||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:p||r++,prefix:f||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,c=i[a.name];if(null==c){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+c+'"');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(s=encodeURIComponent(c[u]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===u?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(c),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function u(e){return e.sensitive?"":"i"}function f(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return c(e,t)}function p(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",u(n)),t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return c(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=!1!==t.end,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),c=0;c<e.length;c++){var f=e[c];if("string"==typeof f)i+=a(f);else{var p=a(f.prefix),h=f.pattern;f.repeat&&(h+="(?:"+p+h+")*"),h=f.optional?p?"(?:"+p+"("+h+"))?":"("+h+")?":p+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,u(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?f(e,t,n):v(e)?p(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
/*!
 * EventEmitter v5.0.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
(function(){"use strict";function t(){}function i(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,r=this,s=r.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(r,e){var t,n=this.getListenersAsObject(r),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===i(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(r,s){var n,e,t=this.getListenersAsObject(r);for(e in t)t.hasOwnProperty(e)&&(n=i(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(n,u){var r,e,t,i,o,s=this.getListenersAsObject(n);for(i in s)if(s.hasOwnProperty(i))for(r=s[i].slice(0),t=0;t<r.length;t++)e=r[t],e.once===!0&&this.removeListener(n,e.listener),o=e.listener.apply(this,u||[]),o===this._getOnceReturnValue()&&this.removeListener(n,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul><div class=\"sidebar-nav-space\"></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["$type"]).w("</code></a>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div>").x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_1},{}).x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").x(ctx.getPath(false, ["symbol","classdesc"]),ctx,{"block":body_3},{}).f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_17},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_20},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_23},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_24},{}).x(ctx.getPath(false, ["template","options","symbolMeta"]),ctx,{"block":body_26},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_30},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_32,"block":body_34},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_7},{}).w("</table><br />");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_28},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_29},{}).w("</p>");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_31},{});}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_33},{});}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_33.__dustBody=!0;function body_34(chk,ctx){return chk;}body_34.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"content:readme","type":"content","name":"readme","path":"/?content=readme","contentPath":"content/readme.html"}],"apis":{"_def_":{"documentation":[{"comment":"/**\n * Defines the base interface for all other file based tasks\n */","meta":{"range":[502,4290],"filename":"BaseFileTask.js","lineno":24,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001128","name":"BaseFileTask","type":"ClassDeclaration","paramnames":["taskInfo"]}},"classdesc":"Defines the base interface for all other file based tasks","name":"BaseFileTask","longname":"BaseFileTask","kind":"class","scope":"global","description":"Constructs a new file based task","params":[{"type":{"names":["Object"]},"description":"Task info object with configuration options","name":"taskInfo"},{"type":{"names":["Array.<String>","Set.<String>"]},"description":"Set of full paths to input files","name":"taskInfo.inputFiles"}],"$longname":"BaseFileTask","$members":[{"comment":"/**\n  * Adds all files under the given path to this task's input files\n  *\n  * @param {String} inputPath Full path of the directory to add\n  */","meta":{"range":[2167,2591],"filename":"BaseFileTask.js","lineno":90,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001238","name":"BaseFileTask#addInputDirectory","type":"MethodDefinition","paramnames":["inputPath"]},"vars":{"":null}},"description":"Adds all files under the given path to this task's input files","params":[{"type":{"names":["String"]},"description":"Full path of the directory to add","name":"inputPath"}],"name":"addInputDirectory","longname":"BaseFileTask#addInputDirectory","kind":"function","memberof":"BaseFileTask","scope":"instance","$longname":"BaseFileTask#addInputDirectory"},{"comment":"/**\n  * Adds a new file to this task's input files\n  *\n  * @param {String} pathAndFilename Full path of the file to add\n  */","meta":{"range":[1763,2019],"filename":"BaseFileTask.js","lineno":75,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001198","name":"BaseFileTask#addInputFile","type":"MethodDefinition","paramnames":["pathAndFilename"]},"vars":{"":null}},"description":"Adds a new file to this task's input files","params":[{"type":{"names":["String"]},"description":"Full path of the file to add","name":"pathAndFilename"}],"name":"addInputFile","longname":"BaseFileTask#addInputFile","kind":"function","memberof":"BaseFileTask","scope":"instance","$longname":"BaseFileTask#addInputFile"},{"comment":"/**\n  * Adds all files under the given path to this task's output files\n  *\n  * @param {String} inputPath Full path of the directory to add\n  */","meta":{"range":[3130,3561],"filename":"BaseFileTask.js","lineno":126,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001351","name":"BaseFileTask#addOutputDirectory","type":"MethodDefinition","paramnames":["outputPath"]},"vars":{"":null}},"description":"Adds all files under the given path to this task's output files","params":[{"type":{"names":["String"]},"description":"Full path of the directory to add","name":"inputPath"}],"name":"addOutputDirectory","longname":"BaseFileTask#addOutputDirectory","kind":"function","memberof":"BaseFileTask","scope":"instance","$longname":"BaseFileTask#addOutputDirectory"},{"comment":"/**\n  * Adds a new file to this task's output files\n  *\n  * @param {String} pathAndFilename Full path of the file to add\n  */","meta":{"range":[2721,2981],"filename":"BaseFileTask.js","lineno":111,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001311","name":"BaseFileTask#addOutputFile","type":"MethodDefinition","paramnames":["pathAndFilename"]},"vars":{"":null}},"description":"Adds a new file to this task's output files","params":[{"type":{"names":["String"]},"description":"Full path of the file to add","name":"pathAndFilename"}],"name":"addOutputFile","longname":"BaseFileTask#addOutputFile","kind":"function","memberof":"BaseFileTask","scope":"instance","$longname":"BaseFileTask#addOutputFile"},{"comment":"/**\n  * Will run after the task's action method and add any registered output paths\n  * to the task's output files\n  *\n  * @return {Promise}\n  */","meta":{"range":[3976,4287],"filename":"BaseFileTask.js","lineno":158,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001437","name":"BaseFileTask#afterTaskAction","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Will run after the task's action method and add any registered output paths\nto the task's output files","returns":[{"type":{"names":["Promise"]}}],"name":"afterTaskAction","longname":"BaseFileTask#afterTaskAction","kind":"function","memberof":"BaseFileTask","scope":"instance","params":[],"$longname":"BaseFileTask#afterTaskAction"},{"comment":"/**\n  * Sets the input files for this task.\n  *\n  * This will overwrite any existing input files this task already has. Use\n  * addInputFile or addInputDirectory to add new files to the existing ones.\n  *\n  * @param {Array.<String>|Set.<String>} inputFiles Set of full paths to input files\n  */","meta":{"range":[1418,1491],"filename":"BaseFileTask.js","lineno":57,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001177","name":"BaseFileTask#inputFiles","type":"MethodDefinition","paramnames":["inputFiles"]},"vars":{"":null}},"description":"Sets the input files for this task.\n\nThis will overwrite any existing input files this task already has. Use\naddInputFile or addInputDirectory to add new files to the existing ones.","params":[{"type":{"names":["Array.<String>","Set.<String>"]},"description":"Set of full paths to input files","name":"inputFiles"}],"name":"inputFiles","longname":"BaseFileTask#inputFiles","kind":"member","memberof":"BaseFileTask","scope":"instance","$longname":"BaseFileTask#inputFiles"},{"comment":"/**\n  * Gets the complete list of input files\n  *\n  * @return {Set.<String>} Array with full path to input files\n  */","meta":{"range":[1071,1119],"filename":"BaseFileTask.js","lineno":45,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001169","name":"BaseFileTask#inputFiles","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets the complete list of input files","returns":[{"type":{"names":["Set.<String>"]},"description":"Array with full path to input files"}],"name":"inputFiles","longname":"BaseFileTask#inputFiles","kind":"member","memberof":"BaseFileTask","scope":"instance","params":[],"$longname":"BaseFileTask#inputFiles"},{"comment":"/**\n  * Gets all output files that the task produced\n  *\n  * @return {Set.<String>}\n  */","meta":{"range":[1584,1634],"filename":"BaseFileTask.js","lineno":66,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001190","name":"BaseFileTask#outputFiles","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets all output files that the task produced","returns":[{"type":{"names":["Set.<String>"]}}],"name":"outputFiles","longname":"BaseFileTask#outputFiles","kind":"member","memberof":"BaseFileTask","scope":"instance","params":[],"$longname":"BaseFileTask#outputFiles"},{"comment":"/**\n  * Registers a path to be checked when creating the list of generated\n  * output files\n  *\n  * @param {String} outputPath Full path of the file or directory to register\n  */","meta":{"range":[3744,3826],"filename":"BaseFileTask.js","lineno":148,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001424","name":"BaseFileTask#registerOutputPath","type":"MethodDefinition","paramnames":["outputPath"]},"vars":{"":null}},"description":"Registers a path to be checked when creating the list of generated\noutput files","params":[{"type":{"names":["String"]},"description":"Full path of the file or directory to register","name":"outputPath"}],"name":"registerOutputPath","longname":"BaseFileTask#registerOutputPath","kind":"function","memberof":"BaseFileTask","scope":"instance","$longname":"BaseFileTask#registerOutputPath"}],"$constructor":{"comment":"/**\n  * Constructs a new file based task\n  *\n  * @param {Object} taskInfo Task info object with configuration options\n  * @param {Array.<String>|Set.<String>} taskInfo.inputFiles Set of full paths to input files\n  */","meta":{"range":[770,949],"filename":"BaseFileTask.js","lineno":32,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001134","name":"BaseFileTask","type":"MethodDefinition","paramnames":["taskInfo"]},"vars":{"":null}},"description":"Constructs a new file based task","params":[{"type":{"names":["Object"]},"description":"Task info object with configuration options","name":"taskInfo"},{"type":{"names":["Array.<String>","Set.<String>"]},"description":"Set of full paths to input files","name":"taskInfo.inputFiles"}],"name":"BaseFileTask","longname":"BaseFileTask","kind":"class","scope":"global","undocumented":true,"$longname":"BaseFileTask"}},{"comment":"/**\n * The base logger adapter used by all other implementations\n *\n * A logger adapter is used to allow a task to work with several logging modules.\n * Currently this only includes bunyan loggers and a default logger using\n * console.log.\n *\n * A logger adapter needs to expose the five log levels trace, debug, info, warn\n * and error. The default impementations in this base adapter are all noops, so\n * only override the ones your logger actually supports.\n */","meta":{"range":[544,1381],"filename":"BaseLoggerAdapter.js","lineno":17,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000446","name":"BaseLoggerAdapter","type":"ClassDeclaration","paramnames":["taskName"]}},"classdesc":"The base logger adapter used by all other implementations\n\nA logger adapter is used to allow a task to work with several logging modules.\nCurrently this only includes bunyan loggers and a default logger using\nconsole.log.\n\nA logger adapter needs to expose the five log levels trace, debug, info, warn\nand error. The default impementations in this base adapter are all noops, so\nonly override the ones your logger actually supports.","name":"BaseLoggerAdapter","longname":"BaseLoggerAdapter","kind":"class","scope":"global","description":"Constructs a new logger adapter","params":[{"type":{"names":["String"]},"description":"Name of the task the logger adapter is used in","name":"taskName"}],"$longname":"BaseLoggerAdapter","$members":[{"comment":"/**\n  * Logs a message with the \"debug\" log level\n  */","meta":{"range":[881,891],"filename":"BaseLoggerAdapter.js","lineno":36,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000464","name":"BaseLoggerAdapter#debug","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with the \"debug\" log level","name":"debug","longname":"BaseLoggerAdapter#debug","kind":"function","memberof":"BaseLoggerAdapter","scope":"instance","params":[],"$longname":"BaseLoggerAdapter#debug"},{"comment":"/**\n  * Logs a message with the \"error\" log level\n  */","meta":{"range":[1087,1097],"filename":"BaseLoggerAdapter.js","lineno":51,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000476","name":"BaseLoggerAdapter#error","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with the \"error\" log level","name":"error","longname":"BaseLoggerAdapter#error","kind":"function","memberof":"BaseLoggerAdapter","scope":"instance","params":[],"$longname":"BaseLoggerAdapter#error"},{"comment":"/**\n  * Logs a message with the \"info\" log level\n  */","meta":{"range":[949,958],"filename":"BaseLoggerAdapter.js","lineno":41,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000468","name":"BaseLoggerAdapter#info","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with the \"info\" log level","name":"info","longname":"BaseLoggerAdapter#info","kind":"function","memberof":"BaseLoggerAdapter","scope":"instance","params":[],"$longname":"BaseLoggerAdapter#info"},{"comment":"/**\n  * Prefixes a log message with the task name\n  *\n  * @param {String} message The original message that should be prefixed\n  * @return {String} Prefixed message in the format ${taskName}: ${message}\n  */","meta":{"range":[1309,1378],"filename":"BaseLoggerAdapter.js","lineno":59,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000480","name":"BaseLoggerAdapter#prefixMessage","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Prefixes a log message with the task name","params":[{"type":{"names":["String"]},"description":"The original message that should be prefixed","name":"message"}],"returns":[{"type":{"names":["String"]},"description":"Prefixed message in the format ${taskName}: ${message}"}],"name":"prefixMessage","longname":"BaseLoggerAdapter#prefixMessage","kind":"function","memberof":"BaseLoggerAdapter","scope":"instance","$longname":"BaseLoggerAdapter#prefixMessage"},{"comment":"/**\n  * Logs a message with the \"trace\" log level\n  */","meta":{"range":[812,822],"filename":"BaseLoggerAdapter.js","lineno":31,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000460","name":"BaseLoggerAdapter#trace","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with the \"trace\" log level","name":"trace","longname":"BaseLoggerAdapter#trace","kind":"function","memberof":"BaseLoggerAdapter","scope":"instance","params":[],"$longname":"BaseLoggerAdapter#trace"},{"comment":"/**\n  * Logs a message with the \"warning\" log level\n  */","meta":{"range":[1019,1028],"filename":"BaseLoggerAdapter.js","lineno":46,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000472","name":"BaseLoggerAdapter#warn","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with the \"warning\" log level","name":"warn","longname":"BaseLoggerAdapter#warn","kind":"function","memberof":"BaseLoggerAdapter","scope":"instance","params":[],"$longname":"BaseLoggerAdapter#warn"}],"$constructor":{"comment":"/**\n  * Constructs a new logger adapter\n  *\n  * @param {String} taskName Name of the task the logger adapter is used in\n  */","meta":{"range":[698,753],"filename":"BaseLoggerAdapter.js","lineno":24,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000449","name":"BaseLoggerAdapter","type":"MethodDefinition","paramnames":["taskName"]},"vars":{"":null}},"description":"Constructs a new logger adapter","params":[{"type":{"names":["String"]},"description":"Name of the task the logger adapter is used in","name":"taskName"}],"name":"BaseLoggerAdapter","longname":"BaseLoggerAdapter","kind":"class","scope":"global","undocumented":true,"$longname":"BaseLoggerAdapter"}},{"comment":"/**\n * Defines the base interface for all other tasks\n */","meta":{"range":[325,5695],"filename":"BaseTask.js","lineno":18,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001533","name":"BaseTask","type":"ClassDeclaration","paramnames":["taskInfo"]}},"classdesc":"Defines the base interface for all other tasks","name":"BaseTask","longname":"BaseTask","kind":"class","scope":"global","description":"Constructs a new base task","params":[{"type":{"names":["Object"]},"description":"Task info object with configuration options","name":"taskInfo"},{"type":{"names":["String"]},"description":"Name for the task. Should be unique among all task intances","name":"taskInfo.name"},{"type":{"names":["Object"]},"optional":true,"description":"A bunyan based logger the task should use. If not defined, a default logger using console.log will be created","name":"taskInfo.logger"}],"$longname":"BaseTask","$members":[{"comment":"/**\n  * Function that can be defined per task implementation that will be run\n  * after the task action\n  *\n  * @return {Promise}\n  */","meta":{"range":[4141,4191],"filename":"BaseTask.js","lineno":169,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001779","name":"BaseTask#afterTaskAction","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Function that can be defined per task implementation that will be run\nafter the task action","returns":[{"type":{"names":["Promise"]}}],"name":"afterTaskAction","longname":"BaseTask#afterTaskAction","kind":"function","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#afterTaskAction"},{"comment":"/**\n  * Function that can be defined per task implementation that will be run\n  * before the task action\n  *\n  * @return {Promise}\n  */","meta":{"range":[3951,4002],"filename":"BaseTask.js","lineno":159,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001770","name":"BaseTask#beforeTaskAction","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Function that can be defined per task implementation that will be run\nbefore the task action","returns":[{"type":{"names":["Promise"]}}],"name":"beforeTaskAction","longname":"BaseTask#beforeTaskAction","kind":"function","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#beforeTaskAction"},{"comment":"/**\n  * Utility function to format the elapsed time using process.hrtime\n  *\n  * @param {Array.<Number>} elapsedTime Elapsed time\n  * @return {String} Formated time string\n  */","meta":{"range":[5502,5692],"filename":"BaseTask.js","lineno":219,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001957","name":"BaseTask#formatElapsedTime","type":"MethodDefinition","paramnames":["elapsedTime"]},"vars":{"":null}},"description":"Utility function to format the elapsed time using process.hrtime","params":[{"type":{"names":["Array.<Number>"]},"description":"Elapsed time","name":"elapsedTime"}],"returns":[{"type":{"names":["String"]},"description":"Formated time string"}],"name":"formatElapsedTime","longname":"BaseTask#formatElapsedTime","kind":"function","memberof":"BaseTask","scope":"instance","$longname":"BaseTask#formatElapsedTime"},{"comment":"/**\n  * Gets the loger in use by this task\n  *\n  * @return {BaseLoggerAdapter}\n  */","meta":{"range":[2274,2314],"filename":"BaseTask.js","lineno":97,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001704","name":"BaseTask#logger","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets the loger in use by this task","returns":[{"type":{"names":["BaseLoggerAdapter"]}}],"name":"logger","longname":"BaseTask#logger","kind":"member","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#logger"},{"comment":"/**\n  * Returns the task's name\n  *\n  * @return {String} Task name\n  */","meta":{"range":[1511,1547],"filename":"BaseTask.js","lineno":61,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001637","name":"BaseTask#name","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Returns the task's name","returns":[{"type":{"names":["String"]},"description":"Task name"}],"name":"name","longname":"BaseTask#name","kind":"member","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#name"},{"comment":"/**\n  * Gets the user defined function that will be run after the task action\n  *\n  * @return {Function} Function to run after the task action\n  */","meta":{"range":[3211,3261],"filename":"BaseTask.js","lineno":132,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001741","name":"BaseTask#postTaskRun","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets the user defined function that will be run after the task action","returns":[{"type":{"names":["function"]},"description":"Function to run after the task action"}],"name":"postTaskRun","longname":"BaseTask#postTaskRun","kind":"member","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#postTaskRun"},{"comment":"/**\n  * Sets the user defined function that will be run after the task action\n  *\n  * The function will be called with the task as its only parameter. It will\n  * be executed in a .then Promise chain so you can return a promise to run\n  * async operations.\n  *\n  * @param {Function} postTaskRun Function to run after the task action\n  */","meta":{"range":[3603,3811],"filename":"BaseTask.js","lineno":145,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001749","name":"BaseTask#postTaskRun","type":"MethodDefinition","paramnames":["postTaskRun"]},"vars":{"":null}},"description":"Sets the user defined function that will be run after the task action\n\nThe function will be called with the task as its only parameter. It will\nbe executed in a .then Promise chain so you can return a promise to run\nasync operations.","params":[{"type":{"names":["function"]},"description":"Function to run after the task action","name":"postTaskRun"}],"name":"postTaskRun","longname":"BaseTask#postTaskRun","kind":"member","memberof":"BaseTask","scope":"instance","$longname":"BaseTask#postTaskRun"},{"comment":"/**\n  * Gets the user defined function that will be run before the task action\n  *\n  * @return {Function} Function to run before the task action\n  */","meta":{"range":[2468,2516],"filename":"BaseTask.js","lineno":106,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001712","name":"BaseTask#preTaskRun","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets the user defined function that will be run before the task action","returns":[{"type":{"names":["function"]},"description":"Function to run before the task action"}],"name":"preTaskRun","longname":"BaseTask#preTaskRun","kind":"member","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#preTaskRun"},{"comment":"/**\n  * Sets a user defined function that will be run before the task action\n  *\n  * The function will be called with the task as its only parameter. It will\n  * be executed in a .then Promise chain so you can return a promise to run\n  * async operations.\n  *\n  * @param {Function} preTaskRun Function to run before the task action\n  */","meta":{"range":[2857,3059],"filename":"BaseTask.js","lineno":119,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001720","name":"BaseTask#preTaskRun","type":"MethodDefinition","paramnames":["preTaskRun"]},"vars":{"":null}},"description":"Sets a user defined function that will be run before the task action\n\nThe function will be called with the task as its only parameter. It will\nbe executed in a .then Promise chain so you can return a promise to run\nasync operations.","params":[{"type":{"names":["function"]},"description":"Function to run before the task action","name":"preTaskRun"}],"name":"preTaskRun","longname":"BaseTask#preTaskRun","kind":"member","memberof":"BaseTask","scope":"instance","$longname":"BaseTask#preTaskRun"},{"comment":"/**\n  * Starts the task excution chain\n  *\n  * @return {Promise}\n  */","meta":{"range":[4265,5117],"filename":"BaseTask.js","lineno":178,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001788","name":"BaseTask#run","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Starts the task excution chain","returns":[{"type":{"names":["Promise"]}}],"name":"run","longname":"BaseTask#run","kind":"function","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#run"},{"comment":"/**\n  * The task action, needs to be overriden by every task implementation\n  *\n  * @return {Promise}\n  */","meta":{"range":[5228,5321],"filename":"BaseTask.js","lineno":209,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001949","name":"BaseTask#runTaskAction","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"The task action, needs to be overriden by every task implementation","returns":[{"type":{"names":["Promise"]}}],"name":"runTaskAction","longname":"BaseTask#runTaskAction","kind":"function","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#runTaskAction"},{"comment":"/**\n  * Gets the task's current state\n  *\n  * @return {Number} One of the TASK_STATE_* constants\n  */","meta":{"range":[1653,1691],"filename":"BaseTask.js","lineno":70,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001645","name":"BaseTask#state","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets the task's current state","returns":[{"type":{"names":["Number"]},"description":"One of the TASK_STATE_* constants"}],"name":"state","longname":"BaseTask#state","kind":"member","memberof":"BaseTask","scope":"instance","params":[],"$longname":"BaseTask#state"}],"$constructor":{"comment":"/**\n  * Constructs a new base task\n  *\n  * @param {Object} taskInfo Task info object with configuration options\n  * @param {String} taskInfo.name Name for the task. Should be unique among all task intances\n  * @param {Object} [taskInfo.logger] A bunyan based logger the task should use. If not defined, a default logger using console.log will be created\n  */","meta":{"range":[704,1229],"filename":"BaseTask.js","lineno":27,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100001536","name":"BaseTask","type":"MethodDefinition","paramnames":["taskInfo"]},"vars":{"":null}},"description":"Constructs a new base task","params":[{"type":{"names":["Object"]},"description":"Task info object with configuration options","name":"taskInfo"},{"type":{"names":["String"]},"description":"Name for the task. Should be unique among all task intances","name":"taskInfo.name"},{"type":{"names":["Object"]},"optional":true,"description":"A bunyan based logger the task should use. If not defined, a default logger using console.log will be created","name":"taskInfo.logger"}],"name":"BaseTask","longname":"BaseTask","kind":"class","scope":"global","undocumented":true,"$longname":"BaseTask"}},{"comment":"/**\n * Adapter for a {@link https://github.com/trentm/node-bunyan|bunyan} logger\n *\n * Any logger that adheres to the\n * {@link https://github.com/trentm/node-bunyan#log-method-api|bunan log method API}\n * is considered a bunyan logger, so it may be possible to also use other loggers\n * with this adapter.\n */","meta":{"range":[617,4514],"filename":"BunyanLoggerAdapter.js","lineno":21,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000541","name":"BunyanLoggerAdapter","type":"ClassDeclaration","paramnames":["taskName","logger"]}},"classdesc":"Adapter for a {@link https://github.com/trentm/node-bunyan|bunyan} logger\n\nAny logger that adheres to the\n{@link https://github.com/trentm/node-bunyan#log-method-api|bunan log method API}\nis considered a bunyan logger, so it may be possible to also use other loggers\nwith this adapter.","name":"BunyanLoggerAdapter","longname":"BunyanLoggerAdapter","kind":"class","scope":"global","description":"Constructs a new adapter for a bunyan logger","params":[{"type":{"names":["String"]},"description":"Name of the task the logger is used in","name":"taskName"},{"type":{"names":["Object"]},"description":"The acutal bunyan logger instance","name":"logger"}],"$longname":"BunyanLoggerAdapter","$members":[{"comment":"/**\n  * Logs a message with bunyan's \"debug\" log level method\n  *\n  * @see {@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters\n  */","meta":{"range":[2387,2474],"filename":"BunyanLoggerAdapter.js","lineno":74,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000626","name":"BunyanLoggerAdapter#debug","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with bunyan's \"debug\" log level method","see":["{@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters"],"name":"debug","longname":"BunyanLoggerAdapter#debug","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","params":[],"$longname":"BunyanLoggerAdapter#debug"},{"comment":"/**\n  * Logs a message with bunyan's \"error\" log level method\n  *\n  * @see {@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters\n  */","meta":{"range":[3218,3305],"filename":"BunyanLoggerAdapter.js","lineno":101,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000668","name":"BunyanLoggerAdapter#error","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with bunyan's \"error\" log level method","see":["{@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters"],"name":"error","longname":"BunyanLoggerAdapter#error","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","params":[],"$longname":"BunyanLoggerAdapter#error"},{"comment":"/**\n  * Logs a message with bunyan's \"info\" log level method\n  *\n  * @see {@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters\n  */","meta":{"range":[2665,2750],"filename":"BunyanLoggerAdapter.js","lineno":83,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000640","name":"BunyanLoggerAdapter#info","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with bunyan's \"info\" log level method","see":["{@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters"],"name":"info","longname":"BunyanLoggerAdapter#info","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","params":[],"$longname":"BunyanLoggerAdapter#info"},{"comment":"/**\n  * Checks if a logger is compatible with the bunyan log method API\n  *\n  * The check is very simple and only looks for the availability of the five\n  * log level methods (trace, debug, info, warn and error) on the logger\n  * object. It will not check if the methods actually support the different\n  * parameter combinations bunyan uses.\n  *\n  * @param {Object} logger bunyan (or compatible) logger\n  * @return {Boolean} True if the logger has the five log level mehtods, false if not\n  */","meta":{"range":[1660,1916],"filename":"BunyanLoggerAdapter.js","lineno":49,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000580","name":"BunyanLoggerAdapter#isBunyanCompatibleLogger","type":"MethodDefinition","paramnames":["logger"]},"vars":{"":null}},"description":"Checks if a logger is compatible with the bunyan log method API\n\nThe check is very simple and only looks for the availability of the five\nlog level methods (trace, debug, info, warn and error) on the logger\nobject. It will not check if the methods actually support the different\nparameter combinations bunyan uses.","params":[{"type":{"names":["Object"]},"description":"bunyan (or compatible) logger","name":"logger"}],"returns":[{"type":{"names":["Boolean"]},"description":"True if the logger has the five log level mehtods, false if not"}],"name":"isBunyanCompatibleLogger","longname":"BunyanLoggerAdapter#isBunyanCompatibleLogger","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","$longname":"BunyanLoggerAdapter#isBunyanCompatibleLogger"},{"comment":"/**\n  * Prefixes a log message with the task name and passes it to the bunyan logger\n  *\n  * @param {String} logLevel Log level the message will be logged with\n  * @param {Object} originalArguments Original arguments the log level method was called with\n  */","meta":{"range":[3568,4511],"filename":"BunyanLoggerAdapter.js","lineno":111,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000682","name":"BunyanLoggerAdapter#prefixWithNameAndPassThrough","type":"MethodDefinition","paramnames":["logLevel","originalArguments"]},"vars":{"":null}},"description":"Prefixes a log message with the task name and passes it to the bunyan logger","params":[{"type":{"names":["String"]},"description":"Log level the message will be logged with","name":"logLevel"},{"type":{"names":["Object"]},"description":"Original arguments the log level method was called with","name":"originalArguments"}],"name":"prefixWithNameAndPassThrough","longname":"BunyanLoggerAdapter#prefixWithNameAndPassThrough","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","$longname":"BunyanLoggerAdapter#prefixWithNameAndPassThrough"},{"comment":"/**\n  * Logs a message with bunyan's \"trace\" log level method\n  *\n  * @see {@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters\n  */","meta":{"range":[2108,2195],"filename":"BunyanLoggerAdapter.js","lineno":65,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000612","name":"BunyanLoggerAdapter#trace","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with bunyan's \"trace\" log level method","see":["{@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters"],"name":"trace","longname":"BunyanLoggerAdapter#trace","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","params":[],"$longname":"BunyanLoggerAdapter#trace"},{"comment":"/**\n  * Logs a message with bunyan's \"warn\" log level method\n  *\n  * @see {@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters\n  */","meta":{"range":[2941,3026],"filename":"BunyanLoggerAdapter.js","lineno":92,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000654","name":"BunyanLoggerAdapter#warn","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Logs a message with bunyan's \"warn\" log level method","see":["{@link https://github.com/trentm/node-bunyan#log-method-api|bunyan log method API} for supported parameters"],"name":"warn","longname":"BunyanLoggerAdapter#warn","kind":"function","memberof":"BunyanLoggerAdapter","scope":"instance","params":[],"$longname":"BunyanLoggerAdapter#warn"}],"$constructor":{"comment":"/**\n  * Constructs a new adapter for a bunyan logger\n  *\n  * @param {String} taskName Name of the task the logger is used in\n  * @param {Object} logger The acutal bunyan logger instance\n  */","meta":{"range":[875,1162],"filename":"BunyanLoggerAdapter.js","lineno":29,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000547","name":"BunyanLoggerAdapter","type":"MethodDefinition","paramnames":["taskName","logger"]},"vars":{"":null}},"description":"Constructs a new adapter for a bunyan logger","params":[{"type":{"names":["String"]},"description":"Name of the task the logger is used in","name":"taskName"},{"type":{"names":["Object"]},"description":"The acutal bunyan logger instance","name":"logger"}],"name":"BunyanLoggerAdapter","longname":"BunyanLoggerAdapter","kind":"class","scope":"global","undocumented":true,"$longname":"BunyanLoggerAdapter"}},{"comment":"/**\n * Manages the state for a set of input and output files using file monitors\n *\n * Used by {@link #IncrementalFileTask|IncrementalFileTask} to detect the set of\n * changed files.\n */","meta":{"range":[678,3551],"filename":"ChangeManager.js","lineno":28,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000067","name":"ChangeManager","type":"ClassDeclaration","paramnames":[]}},"classdesc":"Manages the state for a set of input and output files using file monitors\n\nUsed by {@link #IncrementalFileTask|IncrementalFileTask} to detect the set of\nchanged files.","name":"ChangeManager","longname":"ChangeManager","kind":"class","scope":"global","description":"Constructs a new change manager","params":[],"$longname":"ChangeManager","$members":[{"comment":"/**\n  * Deletes all files inside the given state directory, but does not remove the\n  * directory itself\n  *\n  * @param {String} statePath Full path to the state files directory\n  */","meta":{"range":[2218,2285],"filename":"ChangeManager.js","lineno":71,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000205","name":"ChangeManager#delete","type":"MethodDefinition","paramnames":["statePath"]},"vars":{"":null}},"description":"Deletes all files inside the given state directory, but does not remove the\ndirectory itself","params":[{"type":{"names":["String"]},"description":"Full path to the state files directory","name":"statePath"}],"name":"delete","longname":"ChangeManager#delete","kind":"function","memberof":"ChangeManager","scope":"instance","$longname":"ChangeManager#delete"},{"comment":"/**\n  * Gets all changed files from the inputs monitor\n  *\n  * @return {Map.<String, String>}\n  */","meta":{"range":[3104,3172],"filename":"ChangeManager.js","lineno":107,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000266","name":"ChangeManager#getChangedInputFiles","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets all changed files from the inputs monitor","returns":[{"type":{"names":["Map.<String, String>"]}}],"name":"getChangedInputFiles","longname":"ChangeManager#getChangedInputFiles","kind":"function","memberof":"ChangeManager","scope":"instance","params":[],"$longname":"ChangeManager#getChangedInputFiles"},{"comment":"/**\n  * Gets all changed files from the outputs monitor\n  *\n  * @return {Map.<String, String>}\n  */","meta":{"range":[3276,3346],"filename":"ChangeManager.js","lineno":116,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000277","name":"ChangeManager#getChangedOutputFiles","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets all changed files from the outputs monitor","returns":[{"type":{"names":["Map.<String, String>"]}}],"name":"getChangedOutputFiles","longname":"ChangeManager#getChangedOutputFiles","kind":"function","memberof":"ChangeManager","scope":"instance","params":[],"$longname":"ChangeManager#getChangedOutputFiles"},{"comment":"/**\n  * Convenience method to check wether any input or output file changed\n  *\n  * @return {Boolean} True if any file has changed, false if not\n  */","meta":{"range":[2896,3001],"filename":"ChangeManager.js","lineno":98,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000244","name":"ChangeManager#hasChanges","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Convenience method to check wether any input or output file changed","returns":[{"type":{"names":["Boolean"]},"description":"True if any file has changed, false if not"}],"name":"hasChanges","longname":"ChangeManager#hasChanges","kind":"function","memberof":"ChangeManager","scope":"instance","params":[],"$longname":"ChangeManager#hasChanges"},{"comment":"/**\n  * Loads the existing state data from the given path\n  *\n  * @param {String} statePath Full path to the directory containing state data\n  * @return {Boolean} True if both input and output states were loaded, false if not\n  */","meta":{"range":[1166,1625],"filename":"ChangeManager.js","lineno":44,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000098","name":"ChangeManager#load","type":"MethodDefinition","paramnames":["statePath"]},"vars":{"":null}},"description":"Loads the existing state data from the given path","params":[{"type":{"names":["String"]},"description":"Full path to the directory containing state data","name":"statePath"}],"returns":[{"type":{"names":["Boolean"]},"description":"True if both input and output states were loaded, false if not"}],"name":"load","longname":"ChangeManager#load","kind":"function","memberof":"ChangeManager","scope":"instance","$longname":"ChangeManager#load"},{"comment":"/**\n  * Add the given path to the inputs file monitor\n  *\n  * @param {String} pathToMonitor Full path to file or directory to be monitored\n  */","meta":{"range":[2433,2512],"filename":"ChangeManager.js","lineno":80,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000218","name":"ChangeManager#monitorInputPath","type":"MethodDefinition","paramnames":["pathToMonitor"]},"vars":{"":null}},"description":"Add the given path to the inputs file monitor","params":[{"type":{"names":["String"]},"description":"Full path to file or directory to be monitored","name":"pathToMonitor"}],"name":"monitorInputPath","longname":"ChangeManager#monitorInputPath","kind":"function","memberof":"ChangeManager","scope":"instance","$longname":"ChangeManager#monitorInputPath"},{"comment":"/**\n  * Add the given path to the outputs file monitor\n  *\n  * @param {String} pathToMonitor Full path to file or directory to be monitored\n  */","meta":{"range":[2661,2742],"filename":"ChangeManager.js","lineno":89,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000231","name":"ChangeManager#monitorOutputPath","type":"MethodDefinition","paramnames":["pathToMonitor"]},"vars":{"":null}},"description":"Add the given path to the outputs file monitor","params":[{"type":{"names":["String"]},"description":"Full path to file or directory to be monitored","name":"pathToMonitor"}],"name":"monitorOutputPath","longname":"ChangeManager#monitorOutputPath","kind":"function","memberof":"ChangeManager","scope":"instance","$longname":"ChangeManager#monitorOutputPath"},{"comment":"/**\n  * Updates the states for output files with all files under the given paths\n  *\n  * @param {Array.<String>} paths [description]\n  */","meta":{"range":[3488,3548],"filename":"ChangeManager.js","lineno":125,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000288","name":"ChangeManager#updateOutputFiles","type":"MethodDefinition","paramnames":["paths"]},"vars":{"":null}},"description":"Updates the states for output files with all files under the given paths","params":[{"type":{"names":["Array.<String>"]},"description":"[description]","name":"paths"}],"name":"updateOutputFiles","longname":"ChangeManager#updateOutputFiles","kind":"function","memberof":"ChangeManager","scope":"instance","$longname":"ChangeManager#updateOutputFiles"},{"comment":"/**\n  * Writes the current state data into state files in the given path\n  *\n  * @param {String} statePath Full path to the directory where the state data should be storeds\n  */","meta":{"range":[1807,2031],"filename":"ChangeManager.js","lineno":58,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000162","name":"ChangeManager#write","type":"MethodDefinition","paramnames":["statePath"]},"vars":{"":null}},"description":"Writes the current state data into state files in the given path","params":[{"type":{"names":["String"]},"description":"Full path to the directory where the state data should be storeds","name":"statePath"}],"name":"write","longname":"ChangeManager#write","kind":"function","memberof":"ChangeManager","scope":"instance","$longname":"ChangeManager#write"}],"$constructor":{"comment":"/**\n  * Constructs a new change manager\n  */","meta":{"range":[748,931],"filename":"ChangeManager.js","lineno":33,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/incremental","code":{"id":"astnode100000070","name":"ChangeManager","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Constructs a new change manager","name":"ChangeManager","longname":"ChangeManager","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"ChangeManager"}},{"comment":"/**\n * A simple adapter to console.log and console.error\n *\n * All log level simply call console.log, except for error, which uses\n * console.error\n */","meta":{"range":[458,1291],"filename":"ConsoleLoggerAdapter.js","lineno":19,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000897","name":"ConsoleLoggerAdapter","type":"ClassDeclaration","paramnames":[]}},"classdesc":"A simple adapter to console.log and console.error\n\nAll log level simply call console.log, except for error, which uses\nconsole.error","name":"ConsoleLoggerAdapter","longname":"ConsoleLoggerAdapter","kind":"class","scope":"global","$longname":"ConsoleLoggerAdapter","$members":[{"comment":"/**\n  * Logs a message with the \"debug\" log level\n  *\n  * @param {String} message\n  */","meta":{"range":[766,829],"filename":"ConsoleLoggerAdapter.js","lineno":34,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000918","name":"ConsoleLoggerAdapter#debug","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Logs a message with the \"debug\" log level","params":[{"type":{"names":["String"]},"name":"message"}],"name":"debug","longname":"ConsoleLoggerAdapter#debug","kind":"function","memberof":"ConsoleLoggerAdapter","scope":"instance","$longname":"ConsoleLoggerAdapter#debug"},{"comment":"/**\n  * Logs a message with the \"error\" log level\n  *\n  * @param {String} message\n  */","meta":{"range":[1224,1289],"filename":"ConsoleLoggerAdapter.js","lineno":61,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000963","name":"ConsoleLoggerAdapter#error","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Logs a message with the \"error\" log level","params":[{"type":{"names":["String"]},"name":"message"}],"name":"error","longname":"ConsoleLoggerAdapter#error","kind":"function","memberof":"ConsoleLoggerAdapter","scope":"instance","$longname":"ConsoleLoggerAdapter#error"},{"comment":"/**\n  * Logs a message with the \"info\" log level\n  *\n  * @param {String} message\n  */","meta":{"range":[919,981],"filename":"ConsoleLoggerAdapter.js","lineno":43,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000933","name":"ConsoleLoggerAdapter#info","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Logs a message with the \"info\" log level","params":[{"type":{"names":["String"]},"name":"message"}],"name":"info","longname":"ConsoleLoggerAdapter#info","kind":"function","memberof":"ConsoleLoggerAdapter","scope":"instance","$longname":"ConsoleLoggerAdapter#info"},{"comment":"/**\n  * Logs a message with the \"trace\" log level\n  *\n  * @param {String} message\n  */","meta":{"range":[612,675],"filename":"ConsoleLoggerAdapter.js","lineno":25,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000903","name":"ConsoleLoggerAdapter#trace","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Logs a message with the \"trace\" log level","params":[{"type":{"names":["String"]},"name":"message"}],"name":"trace","longname":"ConsoleLoggerAdapter#trace","kind":"function","memberof":"ConsoleLoggerAdapter","scope":"instance","$longname":"ConsoleLoggerAdapter#trace"},{"comment":"/**\n  * Logs a message with the \"warn\" log level\n  *\n  * @param {String} message\n  */","meta":{"range":[1071,1133],"filename":"ConsoleLoggerAdapter.js","lineno":52,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/logger","code":{"id":"astnode100000948","name":"ConsoleLoggerAdapter#warn","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Logs a message with the \"warn\" log level","params":[{"type":{"names":["String"]},"name":"message"}],"name":"warn","longname":"ConsoleLoggerAdapter#warn","kind":"function","memberof":"ConsoleLoggerAdapter","scope":"instance","$longname":"ConsoleLoggerAdapter#warn"}]},{"comment":"/**\n * File based task that is aware of the state of its input and output files and\n * can perform an incremental task run\n */","meta":{"range":[627,4440],"filename":"IncrementalFileTask.js","lineno":25,"columnno":0,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002059","name":"IncrementalFileTask","type":"ClassDeclaration","paramnames":["taskInfo"]}},"classdesc":"File based task that is aware of the state of its input and output files and\ncan perform an incremental task run","name":"IncrementalFileTask","longname":"IncrementalFileTask","kind":"class","scope":"global","description":"Constructs a new incremental file task","params":[{"type":{"names":["Object"]},"description":"Task info object with configuration options","name":"taskInfo"},{"type":{"names":["String"]},"description":"Full path to the incremental data directory","name":"taskInfo.incrementalDirectory"}],"$longname":"IncrementalFileTask","$members":[{"comment":"/**\n  * Override to define the action on a full task run\n  *\n  * @return {Promise}\n  */","meta":{"range":[3624,3722],"filename":"IncrementalFileTask.js","lineno":123,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002317","name":"IncrementalFileTask#doFullTaskRun","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Override to define the action on a full task run","returns":[{"type":{"names":["Promise"]}}],"name":"doFullTaskRun","longname":"IncrementalFileTask#doFullTaskRun","kind":"function","memberof":"IncrementalFileTask","scope":"instance","params":[],"$longname":"IncrementalFileTask#doFullTaskRun"},{"comment":"/**\n  * Override to define the action on an incremental task run\n  *\n  * @param {Map.<String, String>} changedFiles Map of changed files and their state (created, changed, deleted)\n  * @return {Promise}\n  */","meta":{"range":[3978,4109],"filename":"IncrementalFileTask.js","lineno":134,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002325","name":"IncrementalFileTask#doIncrementalTaskRun","type":"MethodDefinition","paramnames":["changedFiles"]},"vars":{"":null}},"description":"Override to define the action on an incremental task run","params":[{"type":{"names":["Map.<String, String>"]},"description":"Map of changed files and their state (created, changed, deleted)","name":"changedFiles"}],"returns":[{"type":{"names":["Promise"]}}],"name":"doIncrementalTaskRun","longname":"IncrementalFileTask#doIncrementalTaskRun","kind":"function","memberof":"IncrementalFileTask","scope":"instance","$longname":"IncrementalFileTask#doIncrementalTaskRun"},{"comment":"/**\n  * Gets the directory where any incremental data will be stored\n  *\n  * @return {String} Full path to the incremental data directory\n  */","meta":{"range":[1410,1478],"filename":"IncrementalFileTask.js","lineno":48,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002109","name":"IncrementalFileTask#incrementalDirectory","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets the directory where any incremental data will be stored","returns":[{"type":{"names":["String"]},"description":"Full path to the incremental data directory"}],"name":"incrementalDirectory","longname":"IncrementalFileTask#incrementalDirectory","kind":"member","memberof":"IncrementalFileTask","scope":"instance","params":[],"$longname":"IncrementalFileTask#incrementalDirectory"},{"comment":"/**\n  * List of directories or files that this task generates\n  *\n  * Each path will passed to {@link #ChangeManager#monitorOutputPath|ChangeManager.monitorOutputPath}\n  * to determine if the output files of a task have changed.\n  *\n  * @return {Array.<String>}\n  */","meta":{"range":[1749,1791],"filename":"IncrementalFileTask.js","lineno":60,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002117","name":"IncrementalFileTask#incrementalOutputs","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"List of directories or files that this task generates\n\nEach path will passed to {@link #ChangeManager#monitorOutputPath|ChangeManager.monitorOutputPath}\nto determine if the output files of a task have changed.","returns":[{"type":{"names":["Array.<String>"]}}],"name":"incrementalOutputs","longname":"IncrementalFileTask#incrementalOutputs","kind":"member","memberof":"IncrementalFileTask","scope":"instance","params":[],"$longname":"IncrementalFileTask#incrementalOutputs"},{"comment":"/**\n  * Loads the result of the last task run and skips it\n  *\n  * If no input or output files changed a task will be skipped. Override this if\n  * you need to load some JS value into your task after completion. Does nothing\n  * by default.\n  *\n  * @return {Promise}\n  */","meta":{"range":[4385,4437],"filename":"IncrementalFileTask.js","lineno":147,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002334","name":"IncrementalFileTask#loadResultAndSkip","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Loads the result of the last task run and skips it\n\nIf no input or output files changed a task will be skipped. Override this if\nyou need to load some JS value into your task after completion. Does nothing\nby default.","returns":[{"type":{"names":["Promise"]}}],"name":"loadResultAndSkip","longname":"IncrementalFileTask#loadResultAndSkip","kind":"function","memberof":"IncrementalFileTask","scope":"instance","params":[],"$longname":"IncrementalFileTask#loadResultAndSkip"},{"comment":"/**\n  * Checks for changed states of input and output files and starts either a full\n  * or incremental task run\n  *\n  * The rules for this are as follows:\n  * <ul>\n  *   <li>No incremental data: full task run</li>\n  *   <li>Output files changed: full task run</li>\n  *   <li>Input files changed: incremental task run</li>\n  *   <li>Nothing changed: skip task run</li>\n  * </ul>\n  *\n  * @return {Promise}\n  */","meta":{"range":[2205,3532],"filename":"IncrementalFileTask.js","lineno":78,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002123","name":"IncrementalFileTask#runTaskAction","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Checks for changed states of input and output files and starts either a full\nor incremental task run\n\nThe rules for this are as follows:\n<ul>\n  <li>No incremental data: full task run</li>\n  <li>Output files changed: full task run</li>\n  <li>Input files changed: incremental task run</li>\n  <li>Nothing changed: skip task run</li>\n</ul>","returns":[{"type":{"names":["Promise"]}}],"name":"runTaskAction","longname":"IncrementalFileTask#runTaskAction","kind":"function","memberof":"IncrementalFileTask","scope":"instance","params":[],"$longname":"IncrementalFileTask#runTaskAction"}],"$constructor":{"comment":"/**\n  * Constructs a new incremental file task\n  *\n  * @param {Object} taskInfo Task info object with configuration options\n  * @param {String} taskInfo.incrementalDirectory Full path to the incremental data directory\n  */","meta":{"range":[912,1263],"filename":"IncrementalFileTask.js","lineno":33,"columnno":1,"path":"/Users/jvennemann/Development/appc/appc-tasks/lib/task","code":{"id":"astnode100002065","name":"IncrementalFileTask","type":"MethodDefinition","paramnames":["taskInfo"]},"vars":{"":null}},"description":"Constructs a new incremental file task","params":[{"type":{"names":["Object"]},"description":"Task info object with configuration options","name":"taskInfo"},{"type":{"names":["String"]},"description":"Full path to the incremental data directory","name":"taskInfo.incrementalDirectory"}],"name":"IncrementalFileTask","longname":"IncrementalFileTask","kind":"class","scope":"global","undocumented":true,"$longname":"IncrementalFileTask"}}],"symbols":["BaseFileTask","BaseFileTask#addInputDirectory","BaseFileTask#addInputFile","BaseFileTask#addOutputDirectory","BaseFileTask#addOutputFile","BaseFileTask#afterTaskAction","BaseFileTask#inputFiles","BaseFileTask#inputFiles","BaseFileTask#outputFiles","BaseFileTask#registerOutputPath","BaseLoggerAdapter","BaseLoggerAdapter#debug","BaseLoggerAdapter#error","BaseLoggerAdapter#info","BaseLoggerAdapter#prefixMessage","BaseLoggerAdapter#trace","BaseLoggerAdapter#warn","BaseTask","BaseTask#afterTaskAction","BaseTask#beforeTaskAction","BaseTask#formatElapsedTime","BaseTask#logger","BaseTask#name","BaseTask#postTaskRun","BaseTask#postTaskRun","BaseTask#preTaskRun","BaseTask#preTaskRun","BaseTask#run","BaseTask#runTaskAction","BaseTask#state","BunyanLoggerAdapter","BunyanLoggerAdapter#debug","BunyanLoggerAdapter#error","BunyanLoggerAdapter#info","BunyanLoggerAdapter#isBunyanCompatibleLogger","BunyanLoggerAdapter#prefixWithNameAndPassThrough","BunyanLoggerAdapter#trace","BunyanLoggerAdapter#warn","ChangeManager","ChangeManager#delete","ChangeManager#getChangedInputFiles","ChangeManager#getChangedOutputFiles","ChangeManager#hasChanges","ChangeManager#load","ChangeManager#monitorInputPath","ChangeManager#monitorOutputPath","ChangeManager#updateOutputFiles","ChangeManager#write","ConsoleLoggerAdapter","ConsoleLoggerAdapter#debug","ConsoleLoggerAdapter#error","ConsoleLoggerAdapter#info","ConsoleLoggerAdapter#trace","ConsoleLoggerAdapter#warn","IncrementalFileTask","IncrementalFileTask#doFullTaskRun","IncrementalFileTask#doIncrementalTaskRun","IncrementalFileTask#incrementalDirectory","IncrementalFileTask#incrementalOutputs","IncrementalFileTask#loadResultAndSkip","IncrementalFileTask#runTaskAction"]}},"app":{"title":"appc-tasks","entrance":"content:readme","server":"github","base":"/appc-tasks/","meta":null,"routing":{"method":"query","caseSensitive":true}},"template":{"name":"Docma Default Template","version":"1.7.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"navItems":[{"label":"Home","href":"/appc-tasks","iconClass":"ico-md ico-bookmark"},{"label":"API","href":"?api","iconClass":"ico-md ico-code"},{"label":"Download","iconClass":"ico-md ico-download","items":[{"label":"<code>npm i appc-tasks -S</code>","href":"https://npmjs.com/appc-tasks","target":"_blank"}]},{"label":"GitHub","href":"https://github.com/appcelerator/appc-tasks","target":"_blank","iconClass":"ico-md ico-github"}],"title":"","sidebar":true,"collapsed":false,"outline":"flat","badges":true,"symbolMeta":false,"search":true,"navbar":true}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){e.getDocmaElem().innerHTML=t},e.loadContent=function(t){e.getContentElem().innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(!(t=(t||window.location.hash||"").replace(/^#/,"")))return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"]');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&o.length>1&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var t=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(e){var n=docma.utils.notate(e,"meta.code.value");if(void 0===n)return"";if("string"!=typeof n)return n;var i=docma.utils.notate(e,"type.names")||[];return!/['"`]/.test(n.slice(0,1))&&i.indexOf("String")>=0&&(1===i.length||-1===t.indexOf(n))?'"'+n+'"':n},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{e=(docma.utils.isConstructor(t)?"new-":"")+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}function t(e){return e}var r={};r.notate=function(e,n){if("object"==typeof e){var t,i=Array.isArray(n)?n:n.split("."),a=i[0];if(a)return t=e[a],i.length>1?(i.shift(),r.notate(t,i)):t}},r.getName=function(e){if(e.alias){var t=n(r.notate(e,"meta.code.name")||"");if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},r.getLongName=function(e){var t=n(e.longname);if(e.alias){var i=n(r.notate(e,"meta.code.name")||"");if(!i)return t;var a=n(e.memberof||"");if(!a)return i;var o=new RegExp("^"+a+"[#\\.~:]"),s="instance"===e.scope?"#":".";return o.test(i)?i:a+s+i}return t},r.getFullName=r.getLongName,r.getCodeName=function(e){return n(r.notate(e,"meta.code.name")||"")||r.getLongName(e)},r.getSymbolByName=function(e,n){var t,i;for(t=0;t<e.length;t++){if(i=e[t],i.name===n||i.longname===n||r.getFullName(i)===n)return i;if(i.$members){var a=r.getSymbolByName(i.$members,n);if(a)return a}}return null},r.isDeprecated=function(e){return e.deprecated},r.isGlobal=function(e){return"global"===e.scope},r.isNamespace=function(e){return"namespace"===e.kind},r.isModule=function(e){return"module"===e.kind},r.isClass=function(e){return!r.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===r.notate(e,"meta.code.type"))},r.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===r.notate(e,"meta.code.type")},r.isStaticMember=function(e){return"static"===e.scope},r.isStatic=r.isStaticMember,r.isInner=function(e){return"inner"===e.scope},r.isInstanceMember=function(e){return"instance"===e.scope},r.isMethod=function(e){var n=r.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},r.isFunction=r.isMethod,r.isInstanceMethod=function(e){return r.isInstanceMember(e)&&r.isMethod(e)},r.isStaticMethod=function(e){return r.isStaticMember(e)&&r.isMethod(e)},r.isProperty=function(e){return"member"===e.kind},r.isInstanceProperty=function(e){return r.isInstanceMember(e)&&r.isProperty(e)},r.isStaticProperty=function(e){return r.isStaticMember(e)&&r.isProperty(e)},r.isTypeDef=function(e){return"typedef"===e.kind},r.isCustomType=r.isTypeDef,r.isEnum=function(e){return e.isEnum},r.isReadOnly=function(e){return e.readonly},r.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},r.isPrivate=function(e){return"private"===e.access},r.isProtected=function(e){return"protected"===e.access},r.isUndocumented=function(e){return!e.comments},r.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},r.getTypes=function(e){if("class"===e.kind)return"class";var n=r.notate(e,"type.names")||[];return n=n.map(function(e){return e.replace(/\.</g,"<")}).join("|"),e.isEnum?"enum<"+n+">":n},r.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var t,i=n.reduce(function(e,n){return t=r.notate(n,"type.names"),Array.isArray(t)?e.concat(t):e},[]);return i.length>0?i.join("|"):"void"},r.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},r.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,n,t){return r.normalizeTabs(r._wrapEscapeCode(t,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,n,t){return r._wrapEscapeCode(t)})},r.parseNewLines=function(e,n){return n=n||{},r._tokenize(e,function(e,t){if(t)return e;var r=e.split(/\n{2,}/);return r.length<=1&&n.keepIfSingle?e:r.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},r.parseLinks=function(e,n){n=n||{};var t=/\{@link +([^}]*?)\}/g,i=e.replace(t,function(e,t){var r,i,a=t.split("|");return 1===a.length?r=i=a[0].trim():(r=a[0].trim(),i=a[1].trim()),'<a href="'+r+'"'+(n.target?' target="'+n.target+'"':"")+">"+i+"</a>"});return r.parseTicks(i)},r.parse=function(e,n){return n=n||{},e=r.trimLeft(e),e=r.parseNewLines(e,n),e=r.parseTicks(e),r.parseLinks(e,n)},r.normalizeTabs=function(e){var n=e.match(/^\s*/gm),t=1/0;if(n.forEach(function(e,n){e=e.replace(/\t/g,"  "),n>0&&(t=Math.min(e.length,t))}),t!==1/0){var r=new RegExp("^\\s{"+t+"}","g");e=e.replace(r,"")}e=e.replace(/^\s*/,"");var i;return e.replace(/(\n+)(\s+)/gm,function(e,n,t){return i=t.replace(/\t/g,"  "),i=new Array(i.length-i.length%2+1).join(" "),n+i})},r.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=r.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return r.isConstructor(e)&&(n+=" constructor"),r.isMethod(e)&&(n+=" method"),r.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},r.getCodeFileInfo=function(e){return{filename:r.notate(e,"meta.filename"),lineno:r.notate(e,"meta.lineno"),path:r.notate(e,"meta.path")}},r.listType=function(e){return e.map(function(e){return r._wrapEscapeCode(e)}).join(", ")},r.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,t=e.map(function(e){return n=r.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),r._wrapEscapeCode(e.type.names.join("|"))+n});return t.length>1?"<ul>\n"+t.join("</li>\n<li>")+"\n</ul>":t},r._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if((r=e[t])&&"object"==typeof r){for(var a in n)if(void 0!==n[a]&&n.hasOwnProperty(a)){if(n[a]!==r[a]){i=null;break}i=r}if(i)break}return i},r._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},r._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},r._wrapEscapeCode=function(e,n){return e=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),e="<code>"+e+"</code>",n?"<pre>"+e+"</pre>":e},r._tokenize=function(e,n){"function"!=typeof n&&(n=t);if(e.indexOf("```")<0)return[n(e,!1)];var r,i="```".length,a="",o="",s=[],u=!1;for(r=0;r<e.length;r++)a+=e[r],o+=e[r],a.length>i&&(a=a.slice(-i)),"```"===a&&(u=!u,u?(s.push(n(o.slice(0,-i),!1)),o=a):(s.push(n(o,!0)),o=""));return s},docma.utils=r}();
!function(){function t(t,e){l.info("Event:",t,e?e[0]:""),y.trigger(t,e)}function e(t,n){if(n&&!(u.indexOf(n)<0)){if(t)docma.app.routing.caseSensitive||(t=t.toLowerCase());else{if(n!==e.Type.API)return;t=f}var o=p._find(docma.routes,{type:n,name:t});o&&p._assign(this,o)}}function n(t,e){dust.render(t,docma,function(t,n){if(t)throw t;m.loadCompiledContent(n),"function"==typeof e&&e()})}function o(){t(docma.Event.Render,[docma.currentRoute]),d&&(t(docma.Event.Ready),d=!1)}function r(o,r){docma._.currentRoute=e.create(null),n(docma._.partials.notFound,function(){if(t(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof r)return r(404);throw new Error("Page or content not found for route: "+JSON.stringify(o))})}function a(){if(s){var t=sessionStorage.getItem("redirectPath")||null;if(t)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",t),page.redirect(t),!0}return!1}function i(t){var e=t||window.location.search;return/^[?&]/.test(e)&&(e=e.slice(1)),e||null}var c,u,d=!1,s="path"===docma.app.routing.method,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(t){!function(){l[t]=function(){docma._.logsEnabled&&console[t].apply(console,arguments)}}()}),docma.addFilter=function(t,e){if(docma.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,docma},docma.removeFilter=function(t){return delete dust.filters[t],docma},docma.filterExists=function(t){return"function"==typeof dust.filters[t]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(t,e){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),e.Type={API:"api",CONTENT:"content"},u=p._values(e.Type),e.prototype.exists=function(){return Boolean(this.id)},e.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},e.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},e.prototype.apply=function(){return this.type===e.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),t(docma.Event.Route,[this]),docma.render(this),this},e.prototype.toString=function(){return JSON.stringify(this)},e.create=function(t,n){return new e(t,n)},e.fromID=function(t){if("string"!=typeof t)return l.warn("Route ID is not a string: "+t),new e(null);var n=t.split(":");return new e(n[1],n[0])},e.fromQuery=function(t){if(!t)return new e(null);var n=t.split("&")[0].split("="),o=n[0].toLowerCase();return new e(n[1],o)},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return e}}),docma.fetch=function(t,e){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,t),e(n.status,o)}},n.open("GET",t,!0),n.send()},docma.render=function(t,a){if(!t||!t.exists())return r(t,a);if(!t.isEqualTo(docma.currentRoute)){docma._.currentRoute=t;var i="function"==typeof a;t.type===e.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(t.contentPath,function(e,c){if(404===e)return r(t,a);n(docma._.partials.content,function(){m.loadContent(c),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(t,n){var o=t.params.apiName||f,r=e.create(o,e.Type.API);if(!r||!r.exists())return n();r.apply()}),page("(/)?:content",function(t,n){var o=t.params.content,r=e.create(o,e.Type.CONTENT);if(!r||!r.exists())return n();r.apply()})),page("(/)?",function(t,n){a()||setTimeout(function(){var o,r=i(t.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?e.fromQuery(r):c;if(!o||!o.exists())return n();o.isCurrent()||o.apply()},100)}),page("*",function(t){l.warn("Unknown Route:",t.path),e.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing Method:     ",docma.app.routing.method),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=e.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);